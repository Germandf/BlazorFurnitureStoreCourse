@page "/order-details"
@page "/order-details/{Id:int}"
@attribute [Authorize]
@inject IProductCategoryService _productCategoryService
@inject IProductService _productService
@inject IClientService _clientService
@inject IOrderService _orderService
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<p>@_message</p>

<div class="container">
    @if (_order is not null && _clients is not null)
    {
        <EditForm Model="@_order" OnValidSubmit="SaveOrder">
            <div class="card">
                <h5 class="card-header">Order Details</h5>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Number</label>
                            <InputNumber class="form-control" disabled @bind-Value="_order.OrderNumber" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Order Date</label>
                            <InputDate class="form-control" @bind-Value="_order.OrderDate" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="">Client</label>
                            <InputSelect class="form-control" @bind-Value="_order.ClientId">
                                <option value="0" selected hidden disabled>Select one...</option>
                                @foreach (var item in _clients)
                                {
                                    <option value="@item.Id">@($"{item.LastName}, {item.FirstName}")</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Delivery Date</label>
                            <InputDate class="form-control" @bind-Value="_order.DeliveryDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Total</label>
                            <input type="text" class="form-control" disabled value="@_order.Total.ToString("C")" />
                        </div>
                    </div>
                    @if(_order.Products is not null && _order.Products.Any())
                    {
                        <MudTable Items="_order.Products" Hover="true" Breakpoint="Breakpoint.Sm" Class="mb-3">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Products</MudText>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Price</MudTh>
                                <MudTh>Quantity</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="productContext">
                                <MudTd DataLabel="Name">@productContext.Name</MudTd>
                                <MudTd DataLabel="Price">@productContext.Price</MudTd>
                                <MudTd DataLabel="Quantity">@productContext.Quantity</MudTd>
                                <MudTd DataLabel="">
                                    <MudFab OnClick="() => RemoveProduct(productContext.Id)"
                                            Color="Color.Secondary"
                                            Icon="@Icons.Material.Filled.Delete"
                                            Size="Size.Small"
                                            IconSize="Size.Small" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    <div class="row">
                        <div class="col-md-4 mb-3 mx-auto text-center">
                            <button type="button" class="btn btn-secondary" @onclick="AddProduct">Add Product</button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="mb-3 mx-auto text-end">
                            <button type="button" class="btn btn-danger me-2" @onclick="Cancel">Cancel</button>
                            <button type="submit" class="btn btn-success">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private Order _order = null!;
    private IEnumerable<Client> _clients = null!;
    private string _message = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if(Id > 0)
            {
                _order = await _orderService.GetDetails(Id);
            }
            else
            {
                _order = new() 
                {
                    OrderNumber = await _orderService.GetNextNumber(),
                    ProductCategoryId = 1, 
                    OrderDate = DateTime.Today, 
                    DeliveryDate = DateTime.Today.AddDays(7) 
                };
            }
            _clients = await _clientService.GetClients();
        }
        catch (Exception e)
        {
            _message = $"There was an error... {e.Message}";
        }
    }

    private async Task SaveOrder()
    {
        await _orderService.SaveOrder(_order);
        _navigationManager.NavigateTo("orders");
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("");
    }

    private async Task AddProduct()
    {
        var dialog = _dialogService.Show<ProductDetails>("Product Details");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var product = (Product)result.Data;
            _order.Products.Add(product);
        }
    }

    private async Task RemoveProduct(int productId)
    {
        _snackbar.Add("Product removed", Severity.Success, x => x.VisibleStateDuration = 600);
        _order.Products.RemoveAll(x => x.Id == productId);
    }

}
