@page "/order-details"
@attribute [Authorize]
@inject IProductCategoryService _productCategoryService
@inject IProductService _productService
@inject IClientService _clientService
@inject IOrderService _orderService
@inject NavigationManager _navigationManager

<p>@Message</p>

@if (_order is not null && _productCategories is not null && _products is not null)
{
    <EditForm Model="@_order" OnValidSubmit="SaveOrder">
        <div class="card">
            <h5 class="card-header">Order Details</h5>
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Number</label>
                            <InputNumber class="form-control" @bind-Value="_order.OrderNumber" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Order Date</label>
                            <InputDate class="form-control" @bind-Value="_order.OrderDate" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="">Client</label>
                            <InputSelect class="form-control" @bind-Value="_order.ClientId">
                                <option value="0" selected hidden disabled>Select one...</option>
                                @foreach (var item in _clients)
                                {
                                    <option value="@item.Id">@($"{item.LastName}, {item.FirstName}")</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Delivery Date</label>
                            <InputDate class="form-control" @bind-Value="_order.DeliveryDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Total</label>
                            <InputNumber class="form-control" @bind-Value="_order.Total" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 mb-3 mx-auto text-center">
                            <button type="submit" class="btn btn-success me-2">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <label>Categories</label>
        <InputSelect class="form-control col-sm-5" TValue="int" Value="@_order.ProductCategoryId" 
            ValueChanged="(int productCategoryId) => ProductCategoryChanged(productCategoryId)" 
            ValueExpression="() => _order.ProductCategoryId">
            <option value="0" selected hidden disabled>Select one...</option>
            @foreach (var item in _productCategories)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
        <label>Products</label>
        <InputSelect class="form-control col-sm-5" TValue="int" @bind-Value="@_productId">
            <option value="0" selected hidden disabled>Select one...</option>
            @foreach (var item in _products)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {

    private Order _order;
    private IEnumerable<ProductCategory> _productCategories;
    private IEnumerable<Product> _products;
    private IEnumerable<Client> _clients;
    private int _productId;
    public string Message { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _order = new() 
            { 
                ProductCategoryId = 1, 
                OrderDate = DateTime.Today, 
                DeliveryDate = DateTime.Today.AddDays(7) 
            };
            _productCategories = await _productCategoryService.GetProductCategories();
            _clients = await _clientService.GetClients();
            await LoadProducts();
        }
        catch (Exception e)
        {
            Message = $"There was an error... {e.Message}";
        }
    }

    private async Task ProductCategoryChanged(int productCategoryId)
    {
        _order.ProductCategoryId = productCategoryId;
        _productId = 0;
        if (_order.ProductCategoryId > 0)
            await LoadProducts();
    }

    private async Task LoadProducts()
    {
        _products = await _productService.GetProductsByCategory(_order.ProductCategoryId);
    }

    private async Task SaveOrder()
    {
        await _orderService.SaveOrder(_order);
        _navigationManager.NavigateTo("");
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("");
    }

}
